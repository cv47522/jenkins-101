pipeline {
  agent { label 'docker-agent-python3-alpine' }

  // triggers {
  //   // Poll GitHub every 2 minutes for changes
  //   pollSCM('H/2 * * * *')
  // }

  options {
    // disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '1'))
    timestamps()
    timeout(time: 10, unit: 'MINUTES')
  }

  environment {
    PROJECT_DIR = "${WORKSPACE}"
    PYTHON_PROJECT = "${PROJECT_DIR}/python_project_repo"
    PACKAGE_NAME = 'python_project'
  }

  parameters {
    booleanParam(
      name: 'CHECKOUT_REPO',
      defaultValue: false,
      description: 'Enable extra stage to checkout repo if not using "Pipeline script from SCM" config'
    )
  }

  stages {
    // stage('Declarative: Checkout SCM') { // Already added by "Pipeline script from SCM"
    //   steps {
    //     checkout scm
    //   }
    // }

    stage('Manual Repo Checkout') { // Or use "Pipeline script from SCM"
      when { expression { params.CHECKOUT_REPO } }
      steps {
        // Install Git in runtime or in agent Dockerfile
        // checkout([
        //   $class: 'GitSCM',
        //   branches: [[ name: '*/master' ]],
        //   userRemoteConfigs: [[ url: 'https://github.com/cv47522/jenkins-101.git' ]]
        // ])

        // Or git clone only recent 5 commits:
        sh '''
          git init .
          git pull --depth=5 https://github.com/cv47522/jenkins-101.git master
        '''
      }
    }

    stage('Get Package Version') {
      steps {
        script {
          dir(PYTHON_PROJECT) {
            String packageVersion = sh(script: 'python setup.py --version', returnStdout: true).trim()
            echo "Resolved ${PACKAGE_NAME} Python Package Version: ${packageVersion}"
            currentBuild.displayName = "${PACKAGE_NAME}-${packageVersion}/${BUILD_NUMBER}"
          }
        }
      }
    }

    stage('Install Tox') {
      steps {
        dir(PYTHON_PROJECT) {
          echo '------------ Installing Tox CLI ------------'
          sh """
            python -m venv venv
            . ./venv/bin/activate
            pip install tox
          """
        }
      }
    }
    
    stage('Install Dependencies & Run Tests') {
      steps {
        dir(PYTHON_PROJECT) {
          echo '------------ Installing Dependencies & Running Tests ------------'
          sh """
            . ./venv/bin/activate
            python --version
            python -m tox -e py39,pylint39 --parallel all --parallel-live
          """
        }
      }
    }

    stage('Package') {
      steps {
        dir(PYTHON_PROJECT) {
          echo "------------ Packaging ------------"
          sh """
            python setup.py sdist bdist_wheel
            ls -l dist
          """
        }
      }
    }

    stage('(TODO) Deploy') {
      steps {
        dir(PYTHON_PROJECT) {
          echo "------------ Deploying ------------"
          // withCredentials(
          //   [string(credentialsId:'pypi-token', var:'TOKEN')]
          // )
          // {
          //   sh '''
          //     pip install twine
          //     twine upload -u __token__ -p ${TOKEN} dist/*
          //   '''
          // }
        }
      }
    }
  }

  post {
    always {
      dir(PYTHON_PROJECT) {
        archiveArtifacts artifacts: 'dist/*', fingerprint: true
      }
      cleanWs()
    }
  }
}