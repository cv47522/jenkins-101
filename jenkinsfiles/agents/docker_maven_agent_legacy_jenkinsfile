

/** Global variables used inside functions **/
// Constants
// @Field String VAR_WITH_FIELD = 'original value2'
// VAR_WITHOUT_TYPE_FIELD = 'original value3'

// Variables
// varWithDynamicValue = ''


/** Global variables used outside functions **/
// Constants
// String VAR_WITHOUT_FIELD = 'original value1'

// Variables
String mvnCmd = 'mvn'
String packageVersion = ''

pipeline {
  agent { label 'docker-agent-maven-java21-alpine' }

  triggers {
    // Poll GitHub every 2 minutes for changes
    pollSCM('H/2 * * * *')
  }

  options {
    // disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '1'))
    timestamps()
    timeout(time: 5, unit: 'MINUTES')
  }

  environment {
    PROJECT_DIR = "${WORKSPACE}"
    MAVEN_PROJECT = "${PROJECT_DIR}/maven_project"
    PACKAGE_NAME = 'maven_project'
  }

  parameters {
    booleanParam(
      name: 'CHECKOUT_REPO',
      defaultValue: false,
      description: 'Enable extra stage to checkout repo if not using "Pipeline sript from SCM" config'
    )
  }

  stages {
    // stage('Declarative: Checkout SCM') { // Already added by "Pipeline sript from SCM"
    //   steps {
    //     checkout scm
    //   }
    // }

    stage('Manual Repo Checkout') { // Or use "Pipeline sript from SCM"
      when { expression { params.CHECKOUT_REPO } }
      steps {
        // Install Git in runtime or in agent Dockerfile
        checkout([
          $class: 'GitSCM',
          branches: [[ name: '*/master' ]],
          userRemoteConfigs: [[ url: 'https://github.com/cv47522/jenkins-101.git' ]]
        ])

        // Or git clone only recent 5 commits:
        // sh '''
        //   git init .
        //   git pull --depth=5 https://github.com/cv47522/jenkins-101.git master
        // '''
      }
    }

    stage('Get Package Version') {
      steps {
        script {
          dir(MAVEN_PROJECT) {
            // Read and parse pom.xml
            def pom = readMavenPom file: 'pom.xml'
            packageVersion = pom.version
            echo "Resolved ${PACKAGE_NAME} Maven Package Version: ${packageVersion}"
            currentBuild.displayName = "${PACKAGE_NAME}-${packageVersion}/${BUILD_NUMBER}"
          }
        }
      }
    }

    stage('Build Application') {
      steps {
        script {
          dir(MAVEN_PROJECT) {
            // Decide which Maven command to use
            mvnCmd = fileExists('./mvnw') ? './mvnw' : 'mvn'
            if (mvnCmd == './mvnw') {
              // Ensure the wrapper is executable
              sh 'chmod +x ./mvnw'
            }

            echo "------------ Building with: ${mvnCmd} ------------"
            sh """
              ls -l
              java -version
              javac -version
              ${mvnCmd} -v
              ${mvnCmd} clean compile

              ls -l ./target
              tree .
            """
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir(MAVEN_PROJECT) {
          echo "------------ Testing ------------"
          sh """
            ${mvnCmd} test
          """
        }
      }
    }

    stage('Package') {
      steps {
        dir(MAVEN_PROJECT) {
          echo "------------ Packaging ------------"
          sh """
            ${mvnCmd} package
            tree .
          """
        }
      }
    }

    stage('Deploy') {
      steps {
        dir(MAVEN_PROJECT) {
          echo '------------ Showing dependency tree ------------'
          sh "${mvnCmd} dependency:tree"

          echo "------------ Deploying ------------"
          sh """
            ${mvnCmd} deploy
            tree ./localrepo
          """
        }
      }
    }
  }

  post {
    always {
      dir(MAVEN_PROJECT) {
        // `fingerprint: true`: Computes & Stores artifact checksums to track/audit exactly which binary was built and where it goes
        archiveArtifacts artifacts: 'target/*.jar, pom.xml', fingerprint: true
      }
      cleanWs()
    }
  }
}