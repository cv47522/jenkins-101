/** Global variables used outside functions **/
// Constants
// String VAR_WITHOUT_FIELD = 'original value1'

// Variables
String mvnCmd = 'mvn'
String packageVersion = ''
pipeline {
  agent {
    kubernetes {
      defaultContainer 'maven'
      yamlFile './jenkinsfiles/agents/k8s_templates/maven_pod.yaml' // Fetched from SCM Git repo
    }
  }

  // triggers {
  //   pollSCM 'H/5 * * * *'
  // }

  options {
    // disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '1'))
    timestamps()
    timeout(time: 5, unit: 'MINUTES')
  }

  environment {
    PROJECT_DIR = "${WORKSPACE}"
    MAVEN_PROJECT = "${PROJECT_DIR}/maven_project"
    PACKAGE_NAME = 'maven_project'
    MAVEN_SETTINGS_XML = "${WORKSPACE}/.m2/settings.xml"
  }

  parameters {
    booleanParam(
      name: 'CHECKOUT_REPO',
      defaultValue: false,
      description: 'Enable extra stage to checkout repo if not using "Pipeline sript from SCM" config'
    )
  }
  
  stages {
    stage('Manual Repo Checkout') { // Or use "Pipeline sript from SCM"
      when { expression { params.CHECKOUT_REPO } }
      steps {
        // Install Git in runtime or in agent Dockerfile
        checkout([
          $class: 'GitSCM',
          branches: [[ name: '*/master' ]],
          // branches: [[name: "FETCH_HEAD"]],
          userRemoteConfigs: [[
            url: 'https://github.com/cv47522/jenkins-101.git',
            // credentialsId: 'my-github'
          ]]
        ])

        // Or git clone only recent 5 commits:
        // sh '''
        //   git init .
        //   git pull --depth=5 https://github.com/cv47522/jenkins-101.git master
        // '''
      }
    }

    stage('Network Debug') {
      steps {
        container('maven') {
          sh """
            echo "=== Network Diagnostics ==="
            echo "DNS Resolution:"
            nslookup repo.maven.apache.org || echo "DNS resolution failed"
            
            echo "Proxy Environment:"
            env | grep -i proxy || echo "No proxy environment variables"
            
            echo "Connectivity Test:"
            curl -I --connect-timeout 10 http://repo.maven.apache.org/maven2/ || echo "Direct connection failed"
            curl -I --connect-timeout 10 --proxy ${env.HTTP_PROXY} http://repo.maven.apache.org/maven2/ || echo "Proxy connection failed"
          """
        }
      }
    }

    stage('Configure Maven Proxy') {
      steps {
        container('maven') {
          writeFile file: MAVEN_SETTINGS_XML, text: """
    <?xml version="1.0" encoding="UTF-8"?>
    <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
                                  http://maven.apache.org/xsd/settings-1.0.0.xsd">
      <proxies>
        <proxy>
          <id>https-proxy</id>
          <active>true</active>
          <protocol>https</protocol>
          <host>${env.PROXY_IP}</host>
          <port>${env.PROXY_PORT}</port>
          <nonProxyHosts>127.0.0.1|localhost|*.svc|*.cluster.local|10.*</nonProxyHosts>
        </proxy>
        <proxy>
          <id>http-proxy</id>
          <active>true</active>
          <protocol>http</protocol>
          <host>${env.PROXY_IP}</host>
          <port>${env.PROXY_PORT}</port>
          <nonProxyHosts>127.0.0.1|localhost|*.svc|*.cluster.local|10.*</nonProxyHosts>
        </proxy>
      </proxies>
    </settings>
""".trim()

          // Tell Maven where to find that settings.xml
          withEnv(["MAVEN_CONFIG=${WORKSPACE}/.m2"]) {
            echo "Wrote ${MAVEN_SETTINGS_XML}"
            echo '(With "MAVEN_CONFIG" env var) Testing Maven can reach repository with proxy'
            sh 'mvn help:system | head -20 || echo "Maven proxy test failed"'
          }
          echo '(Without "MAVEN_CONFIG" env var) Testing Maven can reach repository with proxy'
          sh"mvn help:system -s ${MAVEN_SETTINGS_XML} | head -20 || echo 'Maven proxy test failed'"
        }
      }
    }

    stage('Get Package Version') {
      steps {
        script {
          dir(MAVEN_PROJECT) {
            // Read and parse pom.xml
            def pom = readMavenPom file: 'pom.xml'
            packageVersion = pom.version
            echo "Resolved ${PACKAGE_NAME} Maven Package Version: ${packageVersion}"
            currentBuild.displayName = "${PACKAGE_NAME}-${packageVersion}/${BUILD_NUMBER}"
          }
        }
      }
    }

    stage('Build') {
      steps {
        script {
          container('maven') {
            dir(MAVEN_PROJECT) {
              // ('./mvnw' needs proxy & doesn't read from settings.xml!) Decide which Maven command to use
              // mvnCmd = fileExists('./mvnw') ? './mvnw' : 'mvn'
              // if (mvnCmd == './mvnw') {
              //   // Ensure the wrapper is executable
              //   sh 'chmod +x ./mvnw'
              // }

              echo "------------ Building with: ${mvnCmd} ------------"
              sh """
                ls -l
                java -version
                javac -version
                ${mvnCmd} -v

                echo 'Updating mvn command to use proxy seetings'
                ${mvnCmd} clean compile -s ${MAVEN_SETTINGS_XML}

                ls -l ./target
                tree .
              """
            }
          }
        }
      }
    }

    stage('Test') {
      steps {
        dir(MAVEN_PROJECT) {
          echo "------------ Testing ------------"
          sh """
            ${mvnCmd} test -s ${MAVEN_SETTINGS_XML}
          """
        }
      }
    }

    stage('Package') {
      steps {
        dir(MAVEN_PROJECT) {
          echo "------------ Packaging ------------"
          sh """
            ${mvnCmd} package -s ${MAVEN_SETTINGS_XML}
            tree .
          """
        }
      }
    }

    stage('Deploy') {
      steps {
        dir(MAVEN_PROJECT) {
          echo '------------ Showing dependency tree ------------'
          sh "${mvnCmd} dependency:tree -s ${MAVEN_SETTINGS_XML}"

          echo "------------ Deploying ------------"
          sh """
            ${mvnCmd} deploy -s ${MAVEN_SETTINGS_XML}
            tree ./localrepo
          """
        }
      }
    }
  }

  post {
    always {
      dir(MAVEN_PROJECT) {
        // `fingerprint: true`: Computes & Stores artifact checksums to track/audit exactly which binary was built and where it goes
        archiveArtifacts artifacts: 'target/*.jar, pom.xml', fingerprint: true
      }
      cleanWs()
    }
  }
}