pipeline {
  agent {
    kubernetes {
      yamlFile './jenkinsfiles/agents/k8s_templates/docker_pod.yaml' // Fetched from SCM Git repo
    }
  }

  // triggers {
  //   pollSCM 'H/5 * * * *'
  // }

  options {
    // disableConcurrentBuilds()
    buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '1'))
    timestamps()
    timeout(time: 5, unit: 'MINUTES')
  }

  environment {
    PROJECT_DIR = "${WORKSPACE}"
    MAVEN_PROJECT = "${PROJECT_DIR}/maven_project"
    PACKAGE_NAME = 'maven_project'
    // Write settings.xml directly to emptyDir location instead of Jenkins workspace
    // MAVEN_USER_HOME = '/root/maven' // (Default) root path
    MAVEN_USER_HOME = '/tmp/maven' // Non-root path
    MAVEN_CACHE_DIR = "${MAVEN_USER_HOME}/.m2"
    MAVEN_SETTINGS_XML = "${MAVEN_CACHE_DIR}/settings.xml"
    DOCKER_REGISTRY = 'docker.io'
    IMAGE_NAME = 'cv47522/my-java-app'
    IMAGE_TAG = "${BUILD_NUMBER}"
  }

  parameters {
    booleanParam(
      name: 'CHECKOUT_REPO',
      defaultValue: false,
      description: 'Enable extra stage to checkout repo if not using "Pipeline sript from SCM" config'
    )
  }

  stages {
    // stage('Declarative: Checkout SCM') { // Already added by "Pipeline sript from SCM"
    //   steps {
    //     checkout scm
    //   }
    // }

    stage('Manual Repo Checkout') { // Or use "Pipeline sript from SCM"
      when { expression { params.CHECKOUT_REPO } }
      steps {
        // Install Git in runtime or in agent Dockerfile
        checkout([
          $class: 'GitSCM',
          branches: [[ name: '*/master' ]],
          // branches: [[name: "FETCH_HEAD"]],
          userRemoteConfigs: [[
            url: 'https://github.com/cv47522/jenkins-101.git',
            // credentialsId: 'my-github'
          ]]
        ])

        // Or git clone only recent 5 commits:
        // sh '''
        //   git init .
        //   git pull --depth=5 https://github.com/cv47522/jenkins-101.git master
        // '''
      }
    }

    stage('Configure Maven Proxy') {
      steps {
        container('maven') {
          // Write settings.xml directly to emptyDir location
          // Create .m2 directory if it doesn't exist
          sh "mkdir -p ${MAVEN_CACHE_DIR}"

          writeFile file: MAVEN_SETTINGS_XML, text: """
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
                              http://maven.apache.org/xsd/settings-1.0.0.xsd">
  <proxies>
    <proxy>
      <id>https-proxy</id>
      <active>true</active>
      <protocol>https</protocol>
      <host>${env.PROXY_IP}</host>
      <port>${env.PROXY_PORT}</port>
      <nonProxyHosts>127.0.0.1|localhost|*.svc|*.cluster.local|10.*</nonProxyHosts>
    </proxy>
    <proxy>
      <id>http-proxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>${env.PROXY_IP}</host>
      <port>${env.PROXY_PORT}</port>
      <nonProxyHosts>127.0.0.1|localhost|*.svc|*.cluster.local|10.*</nonProxyHosts>
    </proxy>
  </proxies>

  <!-- ‚úÖ Point to emptyDir location -->
  <localRepository>${MAVEN_USER_HOME}/.m2/repository</localRepository>
</settings>
""".trim()

          // Verify settings are applied
          sh """
            echo "‚úÖ Settings written successfully!"
            echo "üë§ Running as user: \$(id)"
            echo "üìÅ Directory permissions:"
            ls -la ${MAVEN_CACHE_DIR}

            echo "üîç Testing Maven proxy:"
            mvn help:effective-settings -s ${MAVEN_SETTINGS_XML} | head -20
          """
        }
      }
    }

    stage('Get Package Version') {
      steps {
        script {
          dir(MAVEN_PROJECT) {
            // Read and parse pom.xml
            def pom = readMavenPom file: 'pom.xml'
            packageVersion = pom.version
            echo "Resolved ${PACKAGE_NAME} Maven Package Version: ${packageVersion}"
            currentBuild.displayName = "${PACKAGE_NAME}-${packageVersion}/${BUILD_NUMBER}"
          }
        }
      }
    }

    stage('Build & Test & Package Application') {
      steps {
        container('maven') {
          dir(MAVEN_PROJECT) {
            sh """
              echo 'üèóÔ∏è Building with proxy and cached dependencies...'
              java -version
              javac -version

              mvn clean package -s ${MAVEN_SETTINGS_XML}
              ls -la target/

              echo 'üìä Cache status:'
              du -sh ${MAVEN_CACHE_DIR}repository
              ls -la ${MAVEN_CACHE_DIR}
            """
          }
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        container('docker-client') {
          dir(MAVEN_PROJECT) {
            sh """
              docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
              docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${IMAGE_NAME}:latest
              docker images | grep ${IMAGE_NAME}
            """
          }
        }
      }
    }

    stage('Push to DockerHub') {
      steps {
        script {
          container('docker-client') {
            // Login and push to DockerHub
            withCredentials([usernamePassword(
                credentialsId: 'dockerhub-credentials',
                usernameVariable: 'DOCKER_USERNAME',
                passwordVariable: 'DOCKER_PASSWORD'
            )]) {
              sh """
                echo "\$DOCKER_PASSWORD" | docker login -u "\$DOCKER_USERNAME" --password-stdin
                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                docker push ${IMAGE_NAME}:latest
                docker logout
            """
            }
          }
        }
      }
    }
  }

  post {
    always {
      dir(MAVEN_PROJECT) {
        // `fingerprint: true`: Computes & Stores artifact checksums to track/audit exactly which binary was built and where it goes
        archiveArtifacts artifacts: 'target/*.jar, pom.xml', fingerprint: true
      }

      // Cleanup local images to save space
      sh """
        docker rmi ${IMAGE_NAME}:${IMAGE_TAG} || true
        docker rmi ${IMAGE_NAME}:latest || true
        docker system prune -f
      """
      cleanWs()
    }
    success {
      echo "‚úÖ Successfully built and pushed ${IMAGE_NAME}:${IMAGE_TAG}"
    }
    failure {
      echo "‚ùå Pipeline failed. Check logs for details."
    }
  }
}